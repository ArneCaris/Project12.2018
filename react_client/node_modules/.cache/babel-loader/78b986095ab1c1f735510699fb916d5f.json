{"ast":null,"code":"import _classCallCheck from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Project12.2018\\\\react_client\\\\src\\\\Components\\\\CommentField.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios';\nimport Moment from 'react-moment';\n\nvar CommentField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentField, _Component);\n\n  function CommentField(props) {\n    var _this;\n\n    _classCallCheck(this, CommentField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentField).call(this, props));\n\n    _this.updateState = function () {\n      var currUserId = sessionStorage.getItem(\"userID\");\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      var currMessage = document.getElementById('Message').value;\n\n      _this.setState({\n        UserID: currUserId,\n        PostID: currPostId,\n        Message: currMessage\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          PostID = _this$state.PostID,\n          IDfield = _this$state.IDfield,\n          UserID = _this$state.UserID,\n          Message = _this$state.Message;\n\n      if (Message.length != 0 || UserID == null) {\n        axios.post('http://localhost:3000/comments', {\n          IDfield: IDfield,\n          PostID: PostID,\n          UserID: UserID,\n          Message: Message\n        }).then(function (response) {\n          return _this.fetchComments();\n        });\n      } else {\n        swal();\n      }\n\n      console.log(_this.state);\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchComments = _this.fetchComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      comments: [],\n      IDfield: '',\n      IDlist: '',\n      UserID: '',\n      UserIDlist: '',\n      PostID: '',\n      Message: '',\n      LastEdit: '',\n      username: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchComments();\n    }\n  }, {\n    key: \"fetchComments\",\n    value: function fetchComments() {\n      var _this2 = this;\n\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      axios.get(\"http://localhost:3000/comments/\" + currPostId).then(function (results) {\n        var comments = results.data;\n        var ID = [];\n        var UserID = [];\n        var PostID = [];\n        var Message = [];\n        var LastEdit = [];\n        var username = [];\n\n        for (var x = 0; x < comments.length; x++) {\n          ID.push(comments[x].ID);\n          UserID.push(comments[x].UserID);\n          PostID.push(comments[x].PostID);\n          Message.push(comments[x].Message);\n          LastEdit.push(comments[x].LastEdit);\n        }\n\n        axios.get('http://localhost:3000/Users/').then(function (results) {\n          var users = results.data;\n\n          for (var y = 0; y < users.length; y++) {\n            username[users[y].ID] = users[y].username;\n          }\n        });\n\n        _this2.setState({\n          comments: comments,\n          ID: ID,\n          UserID: UserID,\n          PostID: PostID,\n          Message: Message,\n          LastEdit: LastEdit,\n          username: username\n        });\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return this.state.PostID !== sessionStorage.getItem('PostID') || this.state.ID != this.prevProps;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var commentsList = this.state.comments.map(function (comment, index) {\n        var commentUser = comment.UserID;\n        var Messagestring = comment.Message;\n        var counting = index + 1;\n        var username = _this3.state.username[commentUser];\n        return React.createElement(\"div\", {\n          className: \"for-comments\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentdiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(Moment, {\n          format: \"DD-MM-YYYY\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, comment.LastEdit)), React.createElement(\"ul\", {\n          key: comment.ID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"#\", counting, \" \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, username)), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, Messagestring))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, sessionStorage.length !== 0 ? React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Write a comment:\"), React.createElement(Input, {\n        type: \"textarea\",\n        onKeyUp: this.updateState,\n        name: \"Message\",\n        id: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Comment\"))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"You are not authenticated\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, commentsList));\n    }\n  }]);\n\n  return CommentField;\n}(Component);\n\nexport default CommentField;","map":{"version":3,"sources":["C:\\Project12.2018\\react_client\\src\\Components\\CommentField.js"],"names":["React","Component","FormGroup","Label","Input","Button","axios","Moment","CommentField","props","updateState","currUserId","sessionStorage","getItem","currPostId","currMessage","document","getElementById","value","setState","UserID","PostID","Message","console","log","state","handleSubmit","e","preventDefault","IDfield","length","post","then","response","fetchComments","swal","bind","comments","IDlist","UserIDlist","LastEdit","username","get","results","data","ID","x","push","users","y","prevProps","commentsList","map","comment","index","commentUser","Messagestring","counting"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormGroup , Label, Input, Button } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nclass CommentField extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.fetchComments = this.fetchComments.bind(this);\r\n        this.state = {\r\n            comments: [],\r\n            IDfield: '',\r\n            IDlist: '',\r\n            UserID: '',\r\n            UserIDlist: '',\r\n            PostID: '',\r\n            Message: '',\r\n            LastEdit: '',\r\n            username: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchComments();\r\n    }\r\n\r\n    fetchComments () {\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n\r\n        axios.get(`http://localhost:3000/comments/`+currPostId).then(results => {\r\n            const comments = results.data;\r\n            const ID = [];\r\n            const UserID = [];\r\n            const PostID = [];\r\n            const Message = [];\r\n            const LastEdit = [];\r\n            const username = [];\r\n            for (var x = 0; x < comments.length; x++) {\r\n                ID.push(comments[x].ID);\r\n                UserID.push(comments[x].UserID);\r\n                PostID.push(comments[x].PostID);\r\n                Message.push(comments[x].Message);\r\n                LastEdit.push(comments[x].LastEdit);\r\n            }\r\n            axios.get('http://localhost:3000/Users/').then(results => {\r\n                const users = results.data;\r\n\r\n                for ( var y = 0; y < users.length; y++){\r\n                    username[users[y].ID] = users[y].username;\r\n                }\r\n            });\r\n            this.setState({\r\n                comments,\r\n                ID,\r\n                UserID,\r\n                PostID,\r\n                Message,\r\n                LastEdit,\r\n                username\r\n            });\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return this.state.PostID !== sessionStorage.getItem('PostID') || this.state.ID != this.prevProps;\r\n    }\r\n\r\n    updateState = () => {\r\n        const currUserId = sessionStorage.getItem(\"userID\");\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n        const currMessage = document.getElementById('Message').value;\r\n\r\n        this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\r\n        console.log(this.state)\r\n\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { PostID, IDfield, UserID, Message  } = this.state;\r\n        if (Message.length != 0 || UserID == null){\r\n            axios.post('http://localhost:3000/comments', { IDfield, PostID, UserID, Message }).then( response =>\r\n                this.fetchComments());\r\n        } else {\r\n            swal()\r\n        }\r\n        console.log(this.state)\r\n    };\r\n\r\n    render() {\r\n        let commentsList = this.state.comments.map ( (comment, index ) => {\r\n            const commentUser = comment.UserID;\r\n            const Messagestring = comment.Message;\r\n\r\n            const counting = index + 1;\r\n\r\n            const username =  this.state.username[commentUser];\r\n\r\n            return (\r\n                <div className=\"for-comments\">\r\n                        <div className=\"commentdiv\">\r\n                            <div className=\"commentDate\">\r\n                                <Moment format={\"DD-MM-YYYY\"}>\r\n                                    {comment.LastEdit}\r\n                                </Moment>\r\n                            </div>\r\n                            <ul key={comment.ID}>\r\n                                <i>#{counting} <b>{username}</b></i>\r\n                                <br/>\r\n                                <p>{Messagestring}</p>\r\n                            </ul>\r\n                        </div>\r\n                </div>\r\n\r\n                )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {sessionStorage.length !== 0\r\n                    ?\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"Message\">Write a comment:</Label>\r\n                        <Input type=\"textarea\" onKeyUp={this.updateState} name=\"Message\" id=\"Message\" />\r\n                        <Button type=\"submit\">Comment</Button>\r\n                    </FormGroup>\r\n                </form>\r\n                    : <div>You are not authenticated</div>\r\n                }\r\n                <div>\r\n                    {commentsList}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default CommentField;"]},"metadata":{},"sourceType":"module"}