{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from './Button';\nvar propTypes = {\n  /**\r\n   * The `<input>` `type`\r\n   * @type {[type]}\r\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n\n  /**\r\n   * The HTML input name, used to group like checkboxes or radio buttons together\r\n   * semantically\r\n   */\n  name: PropTypes.string,\n\n  /**\r\n   * The checked state of the input, managed by `<ToggleButtonGroup>`` automatically\r\n   */\n  checked: PropTypes.bool,\n\n  /**\r\n   * The disabled state of both the label and input\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * [onChange description]\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * The value of the input, and unique identifier in the ToggleButtonGroup\r\n   */\n  value: PropTypes.any.isRequired\n};\n\nvar ToggleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ToggleButton.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        name = _this$props.name,\n        checked = _this$props.checked,\n        type = _this$props.type,\n        onChange = _this$props.onChange,\n        value = _this$props.value,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"name\", \"checked\", \"type\", \"onChange\", \"value\"]);\n\n    var disabled = props.disabled;\n    return React.createElement(Button, _extends({}, props, {\n      active: !!checked,\n      componentClass: \"label\"\n    }), React.createElement(\"input\", {\n      name: name,\n      type: type,\n      autoComplete: \"off\",\n      value: value,\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange\n    }), children);\n  };\n\n  return ToggleButton;\n}(React.Component);\n\nToggleButton.propTypes = propTypes;\nexport default ToggleButton;","map":null,"metadata":{},"sourceType":"module"}