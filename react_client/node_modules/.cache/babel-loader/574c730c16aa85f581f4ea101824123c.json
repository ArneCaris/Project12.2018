{"ast":null,"code":"import _classCallCheck from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\src\\\\Components\\\\CommentField.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios';\n\nvar CommentField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentField, _Component);\n\n  function CommentField(props) {\n    var _this;\n\n    _classCallCheck(this, CommentField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentField).call(this, props));\n\n    _this.updateState = function (e) {\n      var currUserId = sessionStorage.getItem(\"userID\");\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      var currMessage = e.target.value;\n\n      _this.setState({\n        UserID: currUserId,\n        PostID: currPostId,\n        Message: currMessage\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          PostID = _this$state.PostID,\n          ID = _this$state.ID,\n          UserID = _this$state.UserID,\n          Message = _this$state.Message;\n\n      if (Message.length != 0 || UserID == null) {\n        axios.post('http://localhost:3000/comments', {\n          ID: ID,\n          PostID: PostID,\n          UserID: UserID,\n          Message: Message\n        });\n      } else {\n        alert(\"Can't post an empty comment!\");\n      }\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      comments: [],\n      ID: '',\n      UserID: '',\n      PostID: '',\n      Message: '',\n      LastEdit: '',\n      username: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      axios.get(\"http://localhost:3000/comments/\" + currPostId).then(function (results) {\n        var comments = results.data;\n        var ID = [];\n        var UserID = [];\n        var PostID = [];\n        var Message = [];\n        var LastEdit = [];\n        var username = [];\n\n        for (var x = 0; x < comments.length; x++) {\n          ID.push(comments[x].ID);\n          UserID.push(comments[x].UserID);\n          PostID.push(comments[x].PostID);\n          Message.push(comments[x].Message);\n          LastEdit.push(comments[x].LastEdit);\n        }\n\n        axios.get('http://localhost:3000/Users/').then(function (results) {\n          var users = results.data;\n\n          for (var y = 0; y < users.length; y++) {\n            username[users[y].ID] = users[y].username;\n          }\n        });\n\n        _this2.setState({\n          comments: comments,\n          ID: ID,\n          UserID: UserID,\n          PostID: PostID,\n          Message: Message,\n          LastEdit: LastEdit,\n          username: username\n        });\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      if (this.state.PostID !== sessionStorage.getItem('PostID')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Write a comment:\"), React.createElement(Input, {\n        type: \"textarea\",\n        onKeyUp: this.updateState,\n        name: \"Message\",\n        id: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Comment\"))));\n    }\n  }]);\n\n  return CommentField;\n}(Component);\n\nexport default CommentField;","map":{"version":3,"sources":["C:\\OAMK\\Projects\\Fall_Winter_2018\\Project12.2018\\react_client\\src\\Components\\CommentField.js"],"names":["React","Component","FormGroup","Label","Input","Button","axios","CommentField","props","updateState","e","currUserId","sessionStorage","getItem","currPostId","currMessage","target","value","setState","UserID","PostID","Message","handleSubmit","preventDefault","state","ID","length","post","alert","bind","comments","LastEdit","username","get","then","results","data","x","push","users","y"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormGroup , Label, Input, Button } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nclass CommentField extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.state = {\r\n                comments: [],\r\n                ID: '',\r\n                UserID: '',\r\n                PostID: '',\r\n                Message: '',\r\n                LastEdit: '',\r\n                username: ''\r\n        }; \r\n    }\r\n    \r\n    componentDidMount(){\r\n        const currPostId = sessionStorage.getItem(\"PostID\")\r\n\r\n        axios.get(`http://localhost:3000/comments/`+currPostId).then(results => {\r\n          const comments = results.data;\r\n          const ID = [];\r\n          const UserID = [];\r\n          const PostID = [];\r\n          const Message = [];\r\n          const LastEdit = [];\r\n          const username = [];\r\n          for (var x = 0; x < comments.length; x++) {\r\n              ID.push(comments[x].ID);\r\n              UserID.push(comments[x].UserID);\r\n              PostID.push(comments[x].PostID);\r\n              Message.push(comments[x].Message);\r\n              LastEdit.push(comments[x].LastEdit);\r\n            }\r\n            axios.get('http://localhost:3000/Users/').then(results => {\r\n                const users = results.data;\r\n\r\n                for ( var y = 0; y < users.length; y++){\r\n                username[users[y].ID] = users[y].username;\r\n                } \r\n            });\r\n            this.setState({ \r\n            comments,\r\n            ID,\r\n            UserID,\r\n            PostID,\r\n            Message,\r\n            LastEdit,\r\n            username\r\n           });\r\n        });\r\n    }\r\n\r\n    \r\n    shouldComponentUpdate() {\r\n        if(this.state.PostID !== sessionStorage.getItem('PostID') ){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateState = e => {\r\n        const currUserId = sessionStorage.getItem(\"userID\");\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n        const currMessage = e.target.value;\r\n\r\n        this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { PostID, ID, UserID, Message  } = this.state;\r\n        if (Message.length != 0 || UserID == null){\r\n            axios.post('http://localhost:3000/comments', { ID, PostID, UserID, Message });\r\n        } else {\r\n            alert(\"Can't post an empty comment!\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"Message\">Write a comment:</Label>\r\n                    <Input type=\"textarea\" onKeyUp={this.updateState} name=\"Message\" id=\"Message\" />\r\n                    <Button type=\"submit\">Comment</Button>\r\n                </FormGroup>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentField;\r\n"]},"metadata":{},"sourceType":"module"}