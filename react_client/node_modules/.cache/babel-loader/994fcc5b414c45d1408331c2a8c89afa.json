{"ast":null,"code":"import _classCallCheck from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\src\\\\Components\\\\CommentField.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios';\nimport Moment from 'react-moment';\n\nvar CommentField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentField, _Component);\n\n  function CommentField(props) {\n    var _this;\n\n    _classCallCheck(this, CommentField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentField).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          PostID = _this$state.PostID,\n          IDfield = _this$state.IDfield,\n          UserID = _this$state.UserID,\n          Message = _this$state.Message;\n\n      if (Message.length != 0 || UserID == null || Message != _this.prevProps) {\n        axios.post('http://localhost:3000/comments', {\n          IDfield: IDfield,\n          PostID: PostID,\n          UserID: UserID,\n          Message: Message\n        }).then(function (response) {\n          return _this.fetchComments();\n        });\n      } else {\n        alert(\"Can't post an empty comment!\");\n      }\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchComments = _this.fetchComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      comments: [],\n      IDfield: '',\n      IDlist: '',\n      UserID: '',\n      UserIDlist: '',\n      PostID: '',\n      Message: '',\n      LastEdit: '',\n      username: '',\n      trashCan: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchComments();\n    }\n  }, {\n    key: \"fetchComments\",\n    value: function fetchComments() {\n      var _this2 = this;\n\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      axios.get(\"http://localhost:3000/comments/\" + currPostId).then(function (results) {\n        var comments = results.data;\n        var ID = [];\n        var UserID = [];\n        var PostID = [];\n        var Message = [];\n        var LastEdit = [];\n        var username = [];\n\n        for (var x = 0; x < comments.length; x++) {\n          ID.push(comments[x].ID);\n          UserID.push(comments[x].UserID);\n          PostID.push(comments[x].PostID);\n          Message.push(comments[x].Message);\n          LastEdit.push(comments[x].LastEdit);\n        }\n\n        axios.get('http://localhost:3000/Users/').then(function (results) {\n          var users = results.data;\n\n          for (var y = 0; y < users.length; y++) {\n            username[users[y].ID] = users[y].username;\n          }\n        });\n\n        _this2.setState({\n          comments: comments,\n          IDlist: ID,\n          UserIDList: UserID,\n          Message: Message,\n          LastEdit: LastEdit,\n          username: username\n        });\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      if (this.state.PostID !== sessionStorage.getItem('PostID') || this.state.IDlist != this.prevState) {\n        return true;\n      } else {\n        return false;\n      }\n    } // updateState = () => {\n    //     const currUserId = sessionStorage.getItem(\"userID\");\n    //     const currPostId = sessionStorage.getItem(\"PostID\");\n    //     const currMessage = document.getElementById('Message').value;\n    //     this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\n    //     console.log(this.state)\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var commentsList = this.state.comments.map(function (comment, index) {\n        var commentUser = comment.UserID;\n        var Messagestring = comment.Message;\n        var counting = index + 1;\n        var username = _this3.state.username[commentUser];\n        return React.createElement(\"div\", {\n          className: \"for-comments\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentdiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(Moment, {\n          format: \"DD-MM-YYYY\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, comment.LastEdit)), React.createElement(\"ul\", {\n          key: comment.ID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"#\", counting, \"    \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, username)), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, Messagestring))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Write a comment:\"), React.createElement(Input, {\n        type: \"textarea\",\n        onKeyUp: this.updateState,\n        name: \"Message\",\n        id: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Comment\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, commentsList));\n    }\n  }]);\n\n  return CommentField;\n}(Component);\n\nexport default CommentField;","map":{"version":3,"sources":["C:\\OAMK\\Projects\\Fall_Winter_2018\\Project12.2018\\react_client\\src\\Components\\CommentField.js"],"names":["React","Component","FormGroup","Label","Input","Button","axios","Moment","CommentField","props","handleSubmit","e","preventDefault","state","PostID","IDfield","UserID","Message","length","prevProps","post","then","response","fetchComments","alert","bind","updateState","comments","IDlist","UserIDlist","LastEdit","username","trashCan","currPostId","sessionStorage","getItem","get","results","data","ID","x","push","users","y","setState","UserIDList","prevState","commentsList","map","comment","index","commentUser","Messagestring","counting"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormGroup , Label, Input, Button } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nclass CommentField extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.fetchComments = this.fetchComments.bind(this);\r\n        this.state = {\r\n            comments: [],\r\n\r\n            IDfield: '',\r\n            IDlist: '',\r\n            UserID: '',\r\n            UserIDlist: '',\r\n            PostID: '',\r\n            Message: '',\r\n            LastEdit: '',\r\n            username: '',\r\n            trashCan: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchComments();\r\n    }\r\n\r\n    fetchComments () {\r\n        const currPostId = sessionStorage.getItem(\"PostID\")\r\n\r\n        axios.get(`http://localhost:3000/comments/`+currPostId).then(results => {\r\n            const comments = results.data;\r\n            const ID = [];\r\n            const UserID = [];\r\n            const PostID = [];\r\n            const Message = [];\r\n            const LastEdit = [];\r\n            const username = [];\r\n            for (var x = 0; x < comments.length; x++) {\r\n                ID.push(comments[x].ID);\r\n                UserID.push(comments[x].UserID);\r\n                PostID.push(comments[x].PostID);\r\n                Message.push(comments[x].Message);\r\n                LastEdit.push(comments[x].LastEdit);\r\n            }\r\n            axios.get('http://localhost:3000/Users/').then(results => {\r\n                const users = results.data;\r\n\r\n                for ( var y = 0; y < users.length; y++){\r\n                    username[users[y].ID] = users[y].username;\r\n                }\r\n            });\r\n            this.setState({\r\n                comments,\r\n                IDlist: ID,\r\n                UserIDList: UserID,\r\n                Message,\r\n                LastEdit,\r\n                username\r\n            });\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        if(this.state.PostID !== sessionStorage.getItem('PostID') || this.state.IDlist != this.prevState){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // updateState = () => {\r\n    //     const currUserId = sessionStorage.getItem(\"userID\");\r\n    //     const currPostId = sessionStorage.getItem(\"PostID\");\r\n    //     const currMessage = document.getElementById('Message').value;\r\n\r\n    //     this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\r\n    //     console.log(this.state)\r\n\r\n    // }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { PostID, IDfield, UserID, Message  } = this.state;\r\n        if (Message.length != 0 || UserID == null || Message != this.prevProps){\r\n            axios.post('http://localhost:3000/comments', { IDfield, PostID, UserID, Message }).then( response =>\r\n                this.fetchComments());\r\n        } else {\r\n            alert(\"Can't post an empty comment!\");\r\n        }\r\n        \r\n\r\n    };\r\n\r\n    render() {\r\n        let commentsList = this.state.comments.map ( (comment, index ) => {\r\n            const commentUser = comment.UserID;\r\n            const Messagestring = comment.Message;\r\n\r\n            const counting = index + 1;\r\n\r\n            const username =  this.state.username[commentUser];\r\n\r\n            return (\r\n                <div className=\"for-comments\">\r\n                    <div className=\"commentdiv\">\r\n                        <div className=\"commentDate\">\r\n                            <Moment format={\"DD-MM-YYYY\"}>\r\n                                {comment.LastEdit}\r\n                            </Moment>\r\n                        </div>\r\n                        <ul key={comment.ID} >\r\n                            <i>#{counting}    <b>{username}</b></i>\r\n                            <br/>\r\n                            <p>{Messagestring}</p>\r\n                        </ul>\r\n                    </div>\r\n                </div>)\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"Message\">Write a comment:</Label>\r\n                        <Input type=\"textarea\" onKeyUp={this.updateState} name=\"Message\" id=\"Message\" />\r\n                        <Button type=\"submit\">Comment</Button>\r\n                    </FormGroup>\r\n                </form>\r\n                <div>\r\n                    {commentsList}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default CommentField;"]},"metadata":{},"sourceType":"module"}