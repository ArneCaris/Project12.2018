{"ast":null,"code":"import _toConsumableArray from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\src\\\\Components\\\\CommentField.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios';\nimport Moment from 'react-moment';\n\nvar CommentField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentField, _Component);\n\n  function CommentField(props) {\n    var _this;\n\n    _classCallCheck(this, CommentField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentField).call(this, props));\n\n    _this.updateState = function (e) {\n      var currUserId = sessionStorage.getItem(\"userID\");\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      var currMessage = e.target.value;\n\n      _this.setState({\n        UserID: currUserId,\n        PostID: currPostId,\n        Message: currMessage\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          PostID = _this$state.PostID,\n          IDfield = _this$state.IDfield,\n          UserID = _this$state.UserID,\n          Message = _this$state.Message;\n\n      if (Message.length != 0 || UserID == null) {\n        axios.post('http://localhost:3000/comments', {\n          IDfield: IDfield,\n          PostID: PostID,\n          UserID: UserID,\n          Message: Message\n        }).then(function (response) {\n          return _this.setState(function (prevState) {\n            return {\n              comments: [{\n                IDfield: IDfield,\n                PostID: PostID,\n                UserID: UserID,\n                Message: Message\n              }].concat(_toConsumableArray(prevState.comments))\n            };\n          });\n        });\n      } else {\n        alert(\"Can't post an empty comment!\");\n      }\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      comments: [],\n      IDfield: '',\n      IDlist: '',\n      UserID: '',\n      PostID: '',\n      Message: '',\n      LastEdit: '',\n      username: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      axios.get(\"http://localhost:3000/comments/\" + currPostId).then(function (results) {\n        var comments = results.data;\n        var ID = [];\n        var UserID = [];\n        var PostID = [];\n        var Message = [];\n        var LastEdit = [];\n        var username = [];\n\n        for (var x = 0; x < comments.length; x++) {\n          ID.push(comments[x].ID);\n          UserID.push(comments[x].UserID);\n          PostID.push(comments[x].PostID);\n          Message.push(comments[x].Message);\n          LastEdit.push(comments[x].LastEdit);\n        }\n\n        axios.get('http://localhost:3000/Users/').then(function (results) {\n          var users = results.data;\n\n          for (var y = 0; y < users.length; y++) {\n            username[users[y].ID] = users[y].username;\n          }\n        });\n\n        _this2.setState({\n          comments: comments,\n          ID: ID,\n          UserID: UserID,\n          PostID: PostID,\n          Message: Message,\n          LastEdit: LastEdit,\n          username: username\n        });\n      });\n      console.log(this.state);\n    } //     componentDidUpdate(prevProps) {\n    //     // Typical usage (don't forget to compare props):\n    //     if (this.props.userID !== prevProps.userID) {\n    //       this.fetchData(this.props.userID);\n    //     }\n    //   }\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      if (this.state.PostID !== sessionStorage.getItem('PostID')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var commentsList = this.state.comments.map(function (comment, index) {\n        var commentUser = comment.UserID;\n        var Messagestring = comment.Message;\n        var counting = index + 1;\n        var username = _this3.state.username[commentUser];\n        return React.createElement(\"div\", {\n          className: \"for-comments\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentdiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(Moment, {\n          format: \"DD-MM-YYYY\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, comment.LastEdit)), React.createElement(\"ul\", {\n          key: comment.ID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"#\", counting, \"    \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, username)), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, Messagestring))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Write a comment:\"), React.createElement(Input, {\n        type: \"textarea\",\n        onKeyUp: this.updateState,\n        name: \"Message\",\n        id: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Comment\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, commentsList));\n    }\n  }]);\n\n  return CommentField;\n}(Component);\n\nexport default CommentField;","map":{"version":3,"sources":["C:\\OAMK\\Projects\\Fall_Winter_2018\\Project12.2018\\react_client\\src\\Components\\CommentField.js"],"names":["React","Component","FormGroup","Label","Input","Button","axios","Moment","CommentField","props","updateState","e","currUserId","sessionStorage","getItem","currPostId","currMessage","target","value","setState","UserID","PostID","Message","handleSubmit","preventDefault","state","IDfield","length","post","then","response","prevState","comments","alert","bind","IDlist","LastEdit","username","get","results","data","ID","x","push","users","y","console","log","commentsList","map","comment","index","commentUser","Messagestring","counting"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormGroup , Label, Input, Button } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nclass CommentField extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.state = {\r\n                comments: [],\r\n                IDfield: '',\r\n                IDlist: '',\r\n                UserID: '',\r\n                PostID: '',\r\n                Message: '',\r\n                LastEdit: '',\r\n                username: ''\r\n        }; \r\n    }\r\n    \r\n    componentDidMount(){\r\n        const currPostId = sessionStorage.getItem(\"PostID\")\r\n\r\n        axios.get(`http://localhost:3000/comments/`+currPostId).then(results => {\r\n          const comments = results.data;\r\n          const ID = [];\r\n          const UserID = [];\r\n          const PostID = [];\r\n          const Message = [];\r\n          const LastEdit = [];\r\n          const username = [];\r\n          for (var x = 0; x < comments.length; x++) {\r\n              ID.push(comments[x].ID);\r\n              UserID.push(comments[x].UserID);\r\n              PostID.push(comments[x].PostID);\r\n              Message.push(comments[x].Message);\r\n              LastEdit.push(comments[x].LastEdit);\r\n            }\r\n            axios.get('http://localhost:3000/Users/').then(results => {\r\n                const users = results.data;\r\n\r\n                for ( var y = 0; y < users.length; y++){\r\n                username[users[y].ID] = users[y].username;\r\n                } \r\n            });\r\n            this.setState({ \r\n            comments,\r\n            ID,\r\n            UserID,\r\n            PostID,\r\n            Message,\r\n            LastEdit,\r\n            username\r\n           });\r\n        });\r\n        console.log(this.state)\r\n    }\r\n//     componentDidUpdate(prevProps) {\r\n//     // Typical usage (don't forget to compare props):\r\n//     if (this.props.userID !== prevProps.userID) {\r\n//       this.fetchData(this.props.userID);\r\n//     }\r\n//   }\r\n    \r\n    shouldComponentUpdate() {\r\n        if(this.state.PostID !== sessionStorage.getItem('PostID') ){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateState = e => {\r\n        const currUserId = sessionStorage.getItem(\"userID\");\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n        const currMessage = e.target.value;\r\n\r\n        this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { PostID, IDfield, UserID, Message  } = this.state;\r\n        if (Message.length != 0 || UserID == null){\r\n            axios.post('http://localhost:3000/comments', { IDfield, PostID, UserID, Message }).then( response =>\r\n                this.setState(prevState => ({\r\n                comments: [{ IDfield, PostID, UserID, Message }, ...prevState.comments]\r\n              })));\r\n        } else {\r\n            alert(\"Can't post an empty comment!\");\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        let commentsList = this.state.comments.map ( (comment, index ) => {\r\n            const commentUser = comment.UserID;\r\n            const Messagestring = comment.Message;\r\n            \r\n            const counting = index + 1;\r\n    \r\n            const username =  this.state.username[commentUser];\r\n            \r\n            return (\r\n                <div className=\"for-comments\">\r\n                <div className=\"commentdiv\">\r\n                    <div className=\"commentDate\">\r\n                        <Moment format={\"DD-MM-YYYY\"}>\r\n                            {comment.LastEdit}\r\n                        </Moment>\r\n                    </div>\r\n                    <ul key={comment.ID} >\r\n                    <i>#{counting}    <b>{username}</b></i>\r\n                    <br/>\r\n                    <p>{Messagestring}</p>\r\n                    </ul>\r\n                </div>\r\n                </div>)\r\n            });\r\n\r\n            return (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"Message\">Write a comment:</Label>\r\n                        <Input type=\"textarea\" onKeyUp={this.updateState} name=\"Message\" id=\"Message\" />\r\n                        <Button type=\"submit\">Comment</Button>\r\n                    </FormGroup>\r\n                    </form>\r\n                    <div>\r\n                    {commentsList}\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nexport default CommentField;\r\n"]},"metadata":{},"sourceType":"module"}