{"ast":null,"code":"import _classCallCheck from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\OAMK\\\\Projects\\\\Fall_Winter_2018\\\\Project12.2018\\\\react_client\\\\src\\\\Components\\\\CommentField.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport swal from 'sweetalert2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nvar CommentField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentField, _Component);\n\n  function CommentField(props) {\n    var _this;\n\n    _classCallCheck(this, CommentField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentField).call(this, props));\n\n    _this.updateState = function () {\n      var currUserId = sessionStorage.getItem(\"userID\");\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      var currMessage = document.getElementById('Message').value;\n\n      _this.setState({\n        UserID: currUserId,\n        PostID: currPostId,\n        Message: currMessage\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          PostID = _this$state.PostID,\n          IDfield = _this$state.IDfield,\n          UserID = _this$state.UserID,\n          Message = _this$state.Message;\n\n      if (Message.length != 0 || UserID == null || Message != _this.prevProps) {\n        axios.post('http://localhost:3000/comments', {\n          IDfield: IDfield,\n          PostID: PostID,\n          UserID: UserID,\n          Message: Message\n        }).then(function () {\n          _this.fetchComments();\n        });\n        var toast = swal.mixin({\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 3000\n        });\n        toast({\n          type: 'success',\n          title: 'Comment Posted!'\n        });\n      } else {\n        swal('Waring', 'You cannot post an empty comment!', 'error');\n      }\n\n      document.getElementById('Message').focus();\n    };\n\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchComments = _this.fetchComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      comments: [],\n      IDfield: '',\n      IDlist: '',\n      UserID: '',\n      UserIDlist: '',\n      PostID: '',\n      Message: '',\n      LastEdit: '',\n      username: '',\n      trashCan: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchComments();\n    }\n  }, {\n    key: \"fetchComments\",\n    value: function fetchComments() {\n      var _this2 = this;\n\n      var currPostId = sessionStorage.getItem(\"PostID\");\n      axios.get(\"http://localhost:3000/comments/\" + currPostId).then(function (results) {\n        var comments = results.data;\n        var ID = [];\n        var UserID = [];\n        var PostID = [];\n        var Message = [];\n        var LastEdit = [];\n        var username = [];\n\n        for (var x = 0; x < comments.length; x++) {\n          ID.push(comments[x].ID);\n          UserID.push(comments[x].UserID);\n          PostID.push(comments[x].PostID);\n          Message.push(comments[x].Message);\n          LastEdit.push(comments[x].LastEdit);\n        }\n\n        axios.get('http://localhost:3000/Users/').then(function (results) {\n          var users = results.data;\n\n          for (var y = 0; y < users.length; y++) {\n            username[users[y].ID] = users[y].username;\n          }\n        });\n\n        _this2.setState({\n          comments: comments,\n          IDlist: ID,\n          UserIDList: UserID,\n          Message: Message,\n          LastEdit: LastEdit,\n          username: username\n        });\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      if (this.state.PostID !== sessionStorage.getItem('PostID') || this.state != this.prevState) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var commentsList = this.state.comments.map(function (comment, index) {\n        var commentUser = comment.UserID;\n        var Messagestring = comment.Message;\n        var counting = index + 1;\n        var username = _this3.state.username[commentUser];\n        return React.createElement(\"div\", {\n          className: \"for-comments\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentdiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(Moment, {\n          format: \"MMM DD, YYYY - HH:mm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, comment.LastEdit)), React.createElement(\"ul\", {\n          key: comment.ID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"#\", counting), \" \", username, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, Messagestring))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, sessionStorage.length !== 1 ? React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        style: {\n          padding: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Write a comment:\"), React.createElement(Input, {\n        type: \"textarea\",\n        onKeyUp: this.updateState,\n        name: \"Message\",\n        id: \"Message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Comment\"))) : React.createElement(\"div\", {\n        className: \"auth-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: faExclamationTriangle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"You are not authenticated\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"You must be logged in to post a comment\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, commentsList));\n    }\n  }]);\n\n  return CommentField;\n}(Component);\n\nexport default CommentField;","map":{"version":3,"sources":["C:\\OAMK\\Projects\\Fall_Winter_2018\\Project12.2018\\react_client\\src\\Components\\CommentField.js"],"names":["React","Component","FormGroup","Label","Input","Button","axios","Moment","swal","FontAwesomeIcon","faExclamationTriangle","CommentField","props","updateState","currUserId","sessionStorage","getItem","currPostId","currMessage","document","getElementById","value","setState","UserID","PostID","Message","handleSubmit","e","preventDefault","state","IDfield","length","prevProps","post","then","fetchComments","toast","mixin","position","showConfirmButton","timer","type","title","focus","bind","comments","IDlist","UserIDlist","LastEdit","username","trashCan","get","results","data","ID","x","push","users","y","UserIDList","prevState","commentsList","map","comment","index","commentUser","Messagestring","counting","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormGroup , Label, Input, Button } from 'reactstrap';\r\nimport axios from 'axios';\r\nimport Moment from 'react-moment';\r\nimport swal from 'sweetalert2';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faExclamationTriangle} from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass CommentField extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateState = this.updateState.bind(this);\r\n        this.fetchComments = this.fetchComments.bind(this);\r\n        this.state = {\r\n            comments: [],\r\n\r\n            IDfield: '',\r\n            IDlist: '',\r\n            UserID: '',\r\n            UserIDlist: '',\r\n            PostID: '',\r\n            Message: '',\r\n            LastEdit: '',\r\n            username: '',\r\n            trashCan: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchComments();\r\n    }\r\n\r\n    fetchComments () {\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n\r\n        axios.get(`http://localhost:3000/comments/`+currPostId).then(results => {\r\n            const comments = results.data;\r\n            const ID = [];\r\n            const UserID = [];\r\n            const PostID = [];\r\n            const Message = [];\r\n            const LastEdit = [];\r\n            const username = [];\r\n            for (var x = 0; x < comments.length; x++) {\r\n                ID.push(comments[x].ID);\r\n                UserID.push(comments[x].UserID);\r\n                PostID.push(comments[x].PostID);\r\n                Message.push(comments[x].Message);\r\n                LastEdit.push(comments[x].LastEdit);\r\n            }\r\n            axios.get('http://localhost:3000/Users/').then(results => {\r\n                const users = results.data;\r\n\r\n                for ( var y = 0; y < users.length; y++){\r\n                    username[users[y].ID] = users[y].username;\r\n                }\r\n            });\r\n            this.setState({\r\n                comments,\r\n                IDlist: ID,\r\n                UserIDList: UserID,\r\n                Message,\r\n                LastEdit,\r\n                username\r\n            });\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        if(this.state.PostID !== sessionStorage.getItem('PostID') || this.state != this.prevState){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateState = () => {\r\n        const currUserId = sessionStorage.getItem(\"userID\");\r\n        const currPostId = sessionStorage.getItem(\"PostID\");\r\n        const currMessage = document.getElementById('Message').value;\r\n\r\n        this.setState({ UserID: currUserId, PostID: currPostId, Message: currMessage });\r\n\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { PostID, IDfield, UserID, Message  } = this.state;\r\n        if (Message.length != 0 || UserID == null || Message != this.prevProps){\r\n            axios.post('http://localhost:3000/comments', { IDfield, PostID, UserID, Message }).then(() => {this.fetchComments()}\r\n                );\r\n            const toast = swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 3000\r\n            });\r\n\r\n            toast({\r\n                type: 'success',\r\n                title: 'Comment Posted!'\r\n            });\r\n        } else {\r\n            swal('Waring',\r\n                'You cannot post an empty comment!',\r\n                'error');\r\n        }\r\n        \r\n        document.getElementById('Message').focus();\r\n        \r\n    };\r\n\r\n    render() {\r\n        let commentsList = this.state.comments.map ( (comment, index ) => {\r\n            const commentUser = comment.UserID;\r\n            const Messagestring = comment.Message;\r\n            \r\n            const counting = index + 1;\r\n            var username =  this.state.username[commentUser];\r\n\r\n\r\n            return (\r\n                <div className=\"for-comments\">\r\n                        <div className=\"commentdiv\">\r\n                            <div className=\"commentDate\">\r\n                                <Moment format={\"MMM DD, YYYY - HH:mm\"}>\r\n                                    {comment.LastEdit}\r\n                                </Moment>\r\n                            </div>\r\n                            <ul key={comment.ID}>\r\n                                <i>#{counting}</i> {username}\r\n                                <br/>\r\n                                <p>{Messagestring}</p>\r\n                            </ul>\r\n                        </div>\r\n                </div>\r\n\r\n                )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {sessionStorage.length !== 1\r\n                ?<form onSubmit={this.handleSubmit}>\r\n                    <FormGroup style={{padding: '5px'}}>\r\n                        <Label for=\"Message\">Write a comment:</Label>\r\n                            <Input type=\"textarea\" onKeyUp={this.updateState} name=\"Message\" id=\"Message\" />\r\n                        <Button type=\"submit\">Comment</Button>\r\n                    </FormGroup>\r\n                </form>\r\n                :\r\n                <div className=\"auth-error\">\r\n                    <FontAwesomeIcon icon={faExclamationTriangle}/>\r\n                    <h5>You are not authenticated</h5>\r\n                    <p>You must be logged in to post a comment</p>\r\n                </div>\r\n                }\r\n                <div>\r\n                    {commentsList}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default CommentField;"]},"metadata":{},"sourceType":"module"}